name: "Validate Techdocs"
description: "Runs validation against mkdocs and techdocs to ensure documentation can be created"
inputs:
  repository:
    description: "Name of repository"
    required: true
  descriptor-file:
    description: "Name of catalog entity descriptor file"
    required: false
  namespace:
    description: "Namespace of entity; used as namespace for --entity <namespace/kind/name>"
    default: "default"
    required: false
  token:
    description: "Personal Access token to pull source repository"
    required: false
outputs:
  results:
    description: "Results of validation script"
    value: ${{ steps.validation.outputs.RESULTS }}
runs:
  using: "composite"
  steps:
    - name: Check for lint ignore file
      id: ignorefile
      run: |
        echo "lint_ignore_path=$('./${{ inputs.repository }}/.markdownlintignore') >> $GITHUB_ENV
        if ! test -f "${{ env.lint_ignore_path }}"; then
          touch "${{ env.lint_ignore_path }}"
        fi
      shell: bash
    - name: Lint TechDocs
      uses: nosborn/github-action-markdown-cli@v3.3.0
      with:
        config_file: ./department-of-veterans-affairs/lighthouse-github-actions/.markdownlint.json
        ignore_path: ${{ env.lint_ignore_path }}
        files: ./${{ inputs.repository }}/docs
    - name: Set AuthZ token in link checker config
      working-directory: department-of-veterans-affairs/lighthouse-github-actions
      run: cat <<< $(jq --arg v 'token ${{ inputs.token }}' '.httpHeaders[] .headers.Authorization=$v' mlc_config.json) > mlc_config.json
      shell: bash
    - name: Check Techdoc Links
      id: checkmd
      uses: gaurav-nelson/github-action-markdown-link-check@1.0.15
      with:
        use-verbose-mode: 'yes'
        config-file: './department-of-veterans-affairs/lighthouse-github-actions/mlc_config.json'
    - name: Setup validation args
      id: args
      run: |
        args=""
        if [[ "${{ inputs.strict-mode }}" == "true" ]]; then
          args+="--strict "
        fi
        echo "${args}"
        echo "args=${args}" >> $GITHUB_OUTPUT
      shell: bash
    - name: Run validation script
      id: validation
      working-directory: ${{ inputs.repository }}
      env:
        REPO: ${{ inputs.repository }}
        ENTITY_FILE: ${{ inputs.descriptor-file }}
        NAMESPACE: ${{ inputs.namespace }}
        TOKEN: ${{ inputs.token }}
        ARGS: ${{ steps.args.outputs.args }}
      run: |
        /bin/bash ./../../department-of-veterans-affairs/lighthouse-github-actions/scripts/validate-techdocs.sh
      shell: bash
    - name: Check for warnings
      run: |
        if echo "${{ steps.validation.outputs.results }}" | grep "WARNING"; then
          echo -e "Validation Error:\n${{ steps.validation.outputs.results }}";
          exit 1;
        fi
      shell: bash
    - name: Check for errors
      run: |
        if echo "${{ steps.validation.outputs.results }}" | grep -i "error"; then
          if echo "${{ steps.validation.outputs.results }}" | grep -i "failed to run plantuml"; then
            echo -e "Validation Error: Unable to create diagram with Plantuml.\nMake sure to use the @startuml and @enduml notation."
          fi
          exit 1;
        fi
      shell: bash
