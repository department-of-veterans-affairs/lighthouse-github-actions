name: 'Publish Techdocs'
description: 'Generates and publishes techdocs using kubernetes job'
inputs:
  kubeconfig:
    description: 'Kubernetes context -- config file usually located at ~/.kube/config'
    required: true
  kube_namespace:
    description: 'Namespace to use for Kubernetes job'
    default: 'default'
    required: false
  serviceAccountName:
    description: 'Service account name'
    required: true
  repository:
    description: 'Name of repository'
    required: true
  team-name:
    description: 'Namespace of entity; used as namespace for --entity <namespace/kind/name>'
    required: false
  kind:
    description: 'Kind of entity; used as kind for --entity <namespace/kind/name>'
    required: false
  name:
    description: 'Name of Entity; used as name for --entity <namespace/kind/name>'
    required: false
  username:
    description: 'Username used for GHCR authentication'
    default: ${{ github.repository_owner }}
    required: false
  token:
    description: 'Token used for GHCR authentication'
    default: ${{ github.token }}
    required: false
  descriptor-file:
    description: 'Name of catalog entity descriptor file'
    default: 'catalog-info.yaml'
    required: false

runs:
  using: "composite"
  steps:
  - uses: actions/checkout@v2.4.0
    with:
      ref: 'main'
      repository: ${{ inputs.repository }}
      token: ${{ github.token }}
  - name: Set K8s context
    uses: azure/k8s-set-context@v1
    with:
      method: kubeconfig
      kubeconfig: ${{ inputs.kubeconfig }}
  - name: Set kube namespace
    run: kubectl config set-context --current --namespace=${{ inputs.kube_namespace }}
    shell: bash
  - name: Get entity path
    id: entity
    run: |
      file="./${{ inputs.descriptor-file }}"
      if [[ "${file}" == "./" ]]; then
        file=$(ls | grep 'catalog-info')
      fi
      namespace=$(cat "${file}" | yq .metadata.namespace)
      kind=$(cat "${file}" | yq .kind)
      name="$(cat "${file}" | yq .metadata.name)"
      if [[ -z "${{ inputs.team-name }}" ]]; then
        echo 'Using Entity Namespace from ${{ inputs.descriptor-file }}'
        echo "::set-output name=namespace::$namespace"
      else
        echo 'Using Entity Namespace from input'
        echo "::set-output name=namespace::${{ inputs.team-name }}"
      fi
      if [[ -z "${{ inputs.kind }}" ]]; then
        echo 'Using Entity Kind from ${{ inputs.descriptor-file }}'
        echo "::set-output name=kind::$kind"
      else
        echo 'Using Entity Kind from input'
        echo "::set-output name=kind::${{ inputs.kind }}"
      fi
      if [[ -z "${{ inputs.name }}" ]]; then
        echo 'Using Entity Name from ${{ inputs.descriptor-file }}'
        echo "::set-output name=name::$name"
      else
        echo 'Using Entity Name from input'
        echo "::set-output name=name::${{ inputs.name }}"
      fi
    shell: bash
  - name: Validating Techdocs Location for Catalog Entity
    run: |
      if [[ "${{ steps.entity.outputs.namespace }}" == "null" ]]; then
        echo "Error: cannot create Techdocs with this Entity's namespace. Please add a valid namespace for the Entity."
      fi
      if [[ "${{ steps.entity.outputs.kind }}" == "null" ]]; then
        echo "Error: cannot create Techdocs with this Entity's Kind. Please add a valid Kind for the Entity."
      fi
      if [[ "${{ steps.entity.outputs.name }}" == "null" ]]; then
        echo "Error: cannot create Techdocs with this Entity's Name. Please add a valid Name for the Entity."
      fi
      echo "Entity's Techdocs Location: ${{ steps.entity.outputs.namespace }}/${{ steps.entity.outputs.kind }}/${{ steps.entity.outputs.name }}"
    shell: bash
  - name: Create Dockerconfigjson
    run: >
      ${{ github.action_path }}/scripts/create-dockerconfigjson.sh
      "${{ inputs.repository }}"
    env:
      GITHUB_TOKEN: ${{ inputs.token }}
      GITHUB_USER: ${{ inputs.username }}
    shell: bash
  - name: Create techdocs Job
    run: >
      ${{ github.action_path }}/scripts/create-techdocs-job.sh
      "${{ inputs.serviceAccountName }}"
      "${{ inputs.repository }}"
      "${{ steps.entity.outputs.namespace }}"
      "${{ steps.entity.outputs.kind }}"
      "${{ steps.entity.outputs.name }}"
    env:
      GITHUB_TOKEN: ${{ inputs.token }}
      GITHUB_USER: ${{ inputs.username }}
    shell: bash
  - name: Techdocs Job status
    run: >
      ${{ github.action_path }}/scripts/techdocs-job-status.sh "${{ inputs.repository }}"
    shell: bash